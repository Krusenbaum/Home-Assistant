blueprint:
  name: Sunrise Simulation for Lights
  description: Simulate a natural sunrise by gradually increasing brightness and color over time.
  domain: automation
  input:
    sunrise_enabled:
      name: Sunrise Enabled Boolean
      description: Boolean helper that controls whether the sunrise should run
      selector:
        entity:
          filter:
            - domain: [input_boolean]
          multiple: false
    sunrise_time:
      name: Sunrise Time
      description: Time at which the sunrise should begin
      selector:
        entity:
          filter:
            - domain: [input_datetime]
          multiple: false
    sunrise_duration:
      name: Sunrise Duration
      description: How long the sunrise should last (in minutes)
      selector:
        entity:
          filter:
            - domain: [input_number]
          multiple: false
    sunrise_brightness:
      name: Max Brightness (%)
      description: Maximum brightness for the sunrise (as a percentage from 1 to 100)
      selector:
        entity:
          filter:
            - domain: [input_number]
          multiple: false
    target_lights:
      name: Lights
      description: One or more light entities to control
      selector:
        target:
          entity:
            - domain: light
  source_url: https://raw.githubusercontent.com/Krusenbaum/Home-Assistant/refs/heads/main/sunrise_simulation.yaml

triggers:
  - trigger: time
    at: !input sunrise_time

conditions:
  - condition: state
    entity_id: !input sunrise_enabled
    state: "on"

variables:
  light_entities: !input target_lights
  sunrise_duration_entity: !input sunrise_duration
  sunrise_brightness_entity: !input sunrise_brightness

action:
  - variables:
      duration_minutes: "{{ states(sunrise_duration_entity) | float }}"
      max_brightness: "{{ (states(sunrise_brightness_entity) | float / 100 * 255) | round(0) | int }}"
      duration_seconds: "{{ duration_minutes * 60 }}"
      step_count: 255
      step_delay: "{{ duration_seconds / step_count }}"
  - repeat:
      count: 255
      sequence:
        - condition: or
          conditions:
            - condition: template
              value_template: >
                {% if repeat.index == 1 %}
                  {% set any_on = expand(light_entities.entity_id)
                    | selectattr('state', 'equalto', 'on')
                    | list | count > 0 %}
                  {{ not any_on }}
                {% else %}
                  {% set too_bright = expand(light_entities.entity_id)
                    | selectattr('attributes.brightness', 'defined')
                    | selectattr('attributes.brightness', 'gt', brightness)
                    | list | count > 0 %}
                  {% set any_off = expand(light_entities.entity_id)
                    | selectattr('state', 'equalto', 'off')
                    | list | count > 0 %}
                  {{ not any_off and not too_bright }}
                {% endif %}
        - variables:
            brightness: >-
              {{ [(max_brightness * (repeat.index / step_count) ** 2) + 1 | round(0), max_brightness] | min | int }}
            hue: >-
              {% if repeat.index <= 50 %}
                {{ 0 + (repeat.index / 50 * 10) }}
              {% elif repeat.index <= 150 %}
                {{ 10 + ((repeat.index - 50) / 100 * 25) }}
              {% else %}
                {{ 35 + ((repeat.index - 150) / 105 * 10) }}
              {% endif %}
            saturation: >-
              {% if repeat.index <= 50 %}
                {{ 100 - (repeat.index / 50 * 5) }}
              {% elif repeat.index <= 150 %}
                {{ 95 - ((repeat.index - 50) / 100 * 5) }}
              {% else %}
                {{ 90 - ((repeat.index - 150) / 105 * 5) }}
              {% endif %}
        - action: light.turn_on
          target: "{{ light_entities }}"
          data:
            brightness: "{{ brightness }}"
            hs_color:
              - "{{ hue | float(2) }}"
              - "{{ saturation | float(2) }}"
            transition: 1
        - delay:
            seconds: "{{ step_delay }}"
mode: single
